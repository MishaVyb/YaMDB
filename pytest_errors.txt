============================= test session starts ==============================
platform darwin -- Python 3.8.9, pytest-6.2.4, py-1.11.0, pluggy-0.13.1 -- /Users/alexey/Dev/api_yamdb/venv/bin/python3
django: settings: api_yamdb.settings (from ini)
rootdir: /Users/alexey/Dev/api_yamdb, configfile: pytest.ini, testpaths: tests/
plugins: pythonpath-0.7.3, django-4.4.0
collecting ... collected 53 items

tests/test_00_user_registration.py::Test00UserRegistration::test_00_nodata_signup PASSED [  1%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_invalid_data_signup PASSED [  3%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_valid_data_user_signup PASSED [  5%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_valid_data_admin_create_user PASSED [  7%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_obtain_jwt_token_invalid_data PASSED [  9%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_registration_me_username_restricted PASSED [ 11%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_registration_same_email_restricted PASSED [ 13%]
tests/test_01_users.py::Test01UserAPI::test_01_users_not_authenticated PASSED [ 15%]
tests/test_01_users.py::Test01UserAPI::test_02_users_username_not_authenticated PASSED [ 16%]
tests/test_01_users.py::Test01UserAPI::test_03_users_me_not_authenticated PASSED [ 18%]
tests/test_01_users.py::Test01UserAPI::test_04_users_get_admin PASSED    [ 20%]
tests/test_01_users.py::Test01UserAPI::test_04_02_users_get_search PASSED [ 22%]
tests/test_01_users.py::Test01UserAPI::test_04_01_users_get_admin_only PASSED [ 24%]
tests/test_01_users.py::Test01UserAPI::test_05_01_users_post_admin PASSED [ 26%]
tests/test_01_users.py::Test01UserAPI::test_05_02_users_post_user_superuser PASSED [ 28%]
tests/test_01_users.py::Test01UserAPI::test_06_users_username_get_admin PASSED [ 30%]
tests/test_01_users.py::Test01UserAPI::test_06_users_username_get_not_admin PASSED [ 32%]
tests/test_01_users.py::Test01UserAPI::test_07_01_users_username_patch_admin PASSED [ 33%]
tests/test_01_users.py::Test01UserAPI::test_07_02_users_username_patch_moderator PASSED [ 35%]
tests/test_01_users.py::Test01UserAPI::test_07_03_users_username_patch_user PASSED [ 37%]
tests/test_01_users.py::Test01UserAPI::test_07_05_users_username_put_user_restricted PASSED [ 39%]
tests/test_01_users.py::Test01UserAPI::test_08_01_users_username_delete_admin PASSED [ 41%]
tests/test_01_users.py::Test01UserAPI::test_08_02_users_username_delete_moderator PASSED [ 43%]
tests/test_01_users.py::Test01UserAPI::test_08_03_users_username_delete_user PASSED [ 45%]
tests/test_01_users.py::Test01UserAPI::test_08_04_users_username_delete_superuser PASSED [ 47%]
tests/test_01_users.py::Test01UserAPI::test_09_users_check_permissions PASSED [ 49%]
tests/test_01_users.py::Test01UserAPI::test_10_users_me_get_admin PASSED [ 50%]
tests/test_01_users.py::Test01UserAPI::test_11_01_users_me_patch_admin PASSED [ 52%]
tests/test_01_users.py::Test01UserAPI::test_11_02_users_me_patch_user PASSED [ 54%]
tests/test_02_category.py::Test02CategoryAPI::test_01_category_not_auth PASSED [ 56%]
tests/test_02_category.py::Test02CategoryAPI::test_02_category_admin FAILED [ 58%]
tests/test_02_category.py::Test02CategoryAPI::test_03_category_delete_admin FAILED [ 60%]
tests/test_02_category.py::Test02CategoryAPI::test_04_category_check_permission_admin PASSED [ 62%]
tests/test_02_category.py::Test02CategoryAPI::test_05_category_create_user PASSED [ 64%]
tests/test_02_category.py::Test02CategoryAPI::test_06_category_create_moderator PASSED [ 66%]
tests/test_03_genre.py::Test03GenreAPI::test_01_genre_not_auth PASSED    [ 67%]
tests/test_03_genre.py::Test03GenreAPI::test_02_genre FAILED             [ 69%]
tests/test_03_genre.py::Test03GenreAPI::test_03_genres_delete FAILED     [ 71%]
tests/test_03_genre.py::Test03GenreAPI::test_04_genres_check_permission PASSED [ 73%]
tests/test_03_genre.py::Test03GenreAPI::test_05_genre_create_user PASSED [ 75%]
tests/test_03_genre.py::Test03GenreAPI::test_06_genre_create_moderator PASSED [ 77%]
tests/test_04_title.py::Test04TitleAPI::test_01_title_not_auth PASSED    [ 79%]
tests/test_04_title.py::Test04TitleAPI::test_02_title_admin FAILED       [ 81%]
tests/test_04_title.py::Test04TitleAPI::test_03_titles_detail PASSED     [ 83%]
tests/test_04_title.py::Test04TitleAPI::test_04_titles_check_permission PASSED [ 84%]
tests/test_05_review.py::Test05ReviewAPI::test_01_review_not_auth PASSED [ 86%]
tests/test_05_review.py::Test05ReviewAPI::test_02_review_admin FAILED    [ 88%]
tests/test_05_review.py::Test05ReviewAPI::test_03_review_detail PASSED   [ 90%]
tests/test_05_review.py::Test05ReviewAPI::test_04_reviews_check_permission PASSED [ 92%]
tests/test_06_comment.py::Test06CommentAPI::test_01_comment_not_auth PASSED [ 94%]
tests/test_06_comment.py::Test06CommentAPI::test_02_comment PASSED       [ 96%]
tests/test_06_comment.py::Test06CommentAPI::test_03_review_detail PASSED [ 98%]
tests/test_06_comment.py::Test06CommentAPI::test_04_comment_check_permission PASSED [100%]

=================================== FAILURES ===================================
___________________ Test02CategoryAPI.test_02_category_admin ___________________

self = <tests.test_02_category.Test02CategoryAPI object at 0x110cb9280>
admin_client = <rest_framework.test.APIClient object at 0x110cb9640>

    @pytest.mark.django_db(transaction=True)
    def test_02_category_admin(self, admin_client):
        data = {}
        response = admin_client.post('/api/v1/categories/', data=data)
        assert response.status_code == 400, (
            'Проверьте, что при POST запросе `/api/v1/categories/` с не правильными данными возвращает статус 400'
        )
        data = {
            'name': 'Фильм',
            'slug': 'films'
        }
        response = admin_client.post('/api/v1/categories/', data=data)
        assert response.status_code == 201, (
            'Проверьте, что при POST запросе `/api/v1/categories/` с правильными данными возвращает статус 201'
        )
        data = {
            'name': 'Новые фильмы',
            'slug': 'films'
        }
        response = admin_client.post('/api/v1/categories/', data=data)
        assert response.status_code == 400, (
            'Проверьте, что при POST запросе `/api/v1/categories/` нельзя создать 2 категории с одинаковым `slug`'
        )
        data = {
            'name': 'Книги',
            'slug': 'books'
        }
        response = admin_client.post('/api/v1/categories/', data=data)
        assert response.status_code == 201, (
            'Проверьте, что при POST запросе `/api/v1/categories/` с правильными данными возвращает статус 201'
        )
        response = admin_client.get('/api/v1/categories/')
        assert response.status_code == 200, (
            'Проверьте, что при GET запросе `/api/v1/categories/` возвращает статус 200'
        )
        data = response.json()
        assert 'count' in data, (
            'Проверьте, что при GET запросе `/api/v1/categories/` возвращаете данные с пагинацией. '
            'Не найден параметр `count`'
        )
        assert 'next' in data, (
            'Проверьте, что при GET запросе `/api/v1/categories/` возвращаете данные с пагинацией. '
            'Не найден параметр `next`'
        )
        assert 'previous' in data, (
            'Проверьте, что при GET запросе `/api/v1/categories/` возвращаете данные с пагинацией. '
            'Не найден параметр `previous`'
        )
        assert 'results' in data, (
            'Проверьте, что при GET запросе `/api/v1/categories/` возвращаете данные с пагинацией. '
            'Не найден параметр `results`'
        )
        assert data['count'] == 2, (
            'Проверьте, что при GET запросе `/api/v1/categories/` возвращаете данные с пагинацией. '
            'Значение параметра `count` не правильное'
        )
        assert type(data['results']) == list, (
            'Проверьте, что при GET запросе `/api/v1/categories/` возвращаете данные с пагинацией. '
            'Тип параметра `results` должен быть список'
        )
        assert len(data['results']) == 2, (
            'Проверьте, что при GET запросе `/api/v1/categories/` возвращаете данные с пагинацией. '
            'Значение параметра `results` не правильное'
        )
        assert {'name': 'Книги', 'slug': 'books'} in data['results'], (
            'Проверьте, что при GET запросе `/api/v1/categories/` возвращаете данные с пагинацией. '
            'Значение параметра `results` не правильное'
        )
        response = admin_client.get('/api/v1/categories/?search=Книги')
        data = response.json()
>       assert len(data['results']) == 1, (
            'Проверьте, что при GET запросе `/api/v1/categories/` фильтуется по search параметру названия категории'
        )
E       AssertionError: Проверьте, что при GET запросе `/api/v1/categories/` фильтуется по search параметру названия категории
E       assert 2 == 1
E         +2
E         -1

tests/test_02_category.py:88: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:222 Bad Request: /api/v1/categories/
WARNING  django.request:log.py:222 Bad Request: /api/v1/categories/
_______________ Test02CategoryAPI.test_03_category_delete_admin ________________

self = <tests.test_02_category.Test02CategoryAPI object at 0x110cb9340>
admin_client = <rest_framework.test.APIClient object at 0x110bd3850>

    @pytest.mark.django_db(transaction=True)
    def test_03_category_delete_admin(self, admin_client):
        create_categories(admin_client)
        response = admin_client.delete('/api/v1/categories/books/')
        assert response.status_code == 204, (
            'Проверьте, что при DELETE запросе `/api/v1/categories/{slug}/` возвращаете статус 204'
        )
        response = admin_client.get('/api/v1/categories/')
        test_data = response.json()['results']
        assert len(test_data) == 1, (
            'Проверьте, что при DELETE запросе `/api/v1/categories/{slug}/` удаляете категорию '
        )
        response = admin_client.get('/api/v1/categories/books/')
        code = 405
>       assert response.status_code == code, (
            'Проверьте, что при GET запросе `/api/v1/categories/{slug}/` '
            f'возвращаете статус {code}'
        )
E       AssertionError: Проверьте, что при GET запросе `/api/v1/categories/{slug}/` возвращаете статус 405
E       assert 404 == 405
E         +404
E         -405

tests/test_02_category.py:106: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:222 Not Found: /api/v1/categories/books/
_________________________ Test03GenreAPI.test_02_genre _________________________

self = <tests.test_03_genre.Test03GenreAPI object at 0x110c5d610>
admin_client = <rest_framework.test.APIClient object at 0x110c5dc70>

    @pytest.mark.django_db(transaction=True)
    def test_02_genre(self, admin_client):
        data = {}
        response = admin_client.post('/api/v1/genres/', data=data)
        assert response.status_code == 400, (
            'Проверьте, что при POST запросе `/api/v1/genres/` с не правильными данными возвращает статус 400'
        )
        data = {'name': 'Ужасы', 'slug': 'horror'}
        response = admin_client.post('/api/v1/genres/', data=data)
        assert response.status_code == 201, (
            'Проверьте, что при POST запросе `/api/v1/genres/` с правильными данными возвращает статус 201'
        )
        data = {'name': 'Триллер', 'slug': 'horror'}
        response = admin_client.post('/api/v1/genres/', data=data)
        assert response.status_code == 400, (
            'Проверьте, что при POST запросе `/api/v1/genres/` нельзя создать 2 жанра с одинаковым `slug`'
        )
        data = {'name': 'Комедия', 'slug': 'comedy'}
        response = admin_client.post('/api/v1/genres/', data=data)
        assert response.status_code == 201, (
            'Проверьте, что при POST запросе `/api/v1/genres/` с правильными данными возвращает статус 201'
        )
        response = admin_client.get('/api/v1/genres/')
        assert response.status_code == 200, (
            'Проверьте, что при GET запросе `/api/v1/genres/` возвращает статус 200'
        )
        data = response.json()
        assert 'count' in data, (
            'Проверьте, что при GET запросе `/api/v1/genres/` возвращаете данные с пагинацией. '
            'Не найден параметр `count`'
        )
        assert 'next' in data, (
            'Проверьте, что при GET запросе `/api/v1/genres/` возвращаете данные с пагинацией. '
            'Не найден параметр `next`'
        )
        assert 'previous' in data, (
            'Проверьте, что при GET запросе `/api/v1/genres/` возвращаете данные с пагинацией. '
            'Не найден параметр `previous`'
        )
        assert 'results' in data, (
            'Проверьте, что при GET запросе `/api/v1/genres/` возвращаете данные с пагинацией. '
            'Не найден параметр `results`'
        )
        assert data['count'] == 2, (
            'Проверьте, что при GET запросе `/api/v1/genres/` возвращаете данные с пагинацией. '
            'Значение параметра `count` не правильное'
        )
        assert type(data['results']) == list, (
            'Проверьте, что при GET запросе `/api/v1/genres/` возвращаете данные с пагинацией. '
            'Тип параметра `results` должен быть список'
        )
        assert len(data['results']) == 2, (
            'Проверьте, что при GET запросе `/api/v1/genres/` возвращаете данные с пагинацией. '
            'Значение параметра `results` не правильное'
        )
        assert {'name': 'Ужасы', 'slug': 'horror'} in data['results'], (
            'Проверьте, что при GET запросе `/api/v1/genres/` возвращаете данные с пагинацией. '
            'Значение параметра `results` не правильное'
        )
        response = admin_client.get('/api/v1/genres/?search=Ужасы')
        data = response.json()
>       assert len(data['results']) == 1, (
            'Проверьте, что при GET запросе `/api/v1/genres/` фильтуется по search параметру названия жанра '
        )
E       AssertionError: Проверьте, что при GET запросе `/api/v1/genres/` фильтуется по search параметру названия жанра 
E       assert 2 == 1
E         +2
E         -1

tests/test_03_genre.py:79: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:222 Bad Request: /api/v1/genres/
WARNING  django.request:log.py:222 Bad Request: /api/v1/genres/
_____________________ Test03GenreAPI.test_03_genres_delete _____________________

self = <tests.test_03_genre.Test03GenreAPI object at 0x110bd3ee0>
admin_client = <rest_framework.test.APIClient object at 0x110b8b700>

    @pytest.mark.django_db(transaction=True)
    def test_03_genres_delete(self, admin_client):
        genres = create_genre(admin_client)
        response = admin_client.delete(f'/api/v1/genres/{genres[0]["slug"]}/')
        assert response.status_code == 204, (
            'Проверьте, что при DELETE запросе `/api/v1/genres/{slug}/` возвращаете статус 204'
        )
        response = admin_client.get('/api/v1/genres/')
        test_data = response.json()['results']
        assert len(test_data) == len(genres) - 1, (
            'Проверьте, что при DELETE запросе `/api/v1/genres/{slug}/` удаляете жанр '
        )
        response = admin_client.get(f'/api/v1/genres/{genres[0]["slug"]}/')
>       assert response.status_code == 405, (
            'Проверьте, что при GET запросе `/api/v1/genres/{slug}/` возвращаете статус 405'
        )
E       AssertionError: Проверьте, что при GET запросе `/api/v1/genres/{slug}/` возвращаете статус 405
E       assert 404 == 405
E         +404
E         -405

tests/test_03_genre.py:96: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:222 Not Found: /api/v1/genres/horror/
______________________ Test04TitleAPI.test_02_title_admin ______________________

self = <tests.test_04_title.Test04TitleAPI object at 0x110c0ab80>
admin_client = <rest_framework.test.APIClient object at 0x110c0e430>

    @pytest.mark.django_db(transaction=True)
    def test_02_title_admin(self, admin_client):
        genres = create_genre(admin_client)
        categories = create_categories(admin_client)
        data = {}
        response = admin_client.post('/api/v1/titles/', data=data)
        assert response.status_code == 400, (
            'Проверьте, что при POST запросе `/api/v1/titles/` с не правильными данными возвращает статус 400'
        )
        data = {'name': 'Поворот туда', 'year': 2000, 'genre': [genres[0]['slug'], genres[1]['slug']],
                'category': categories[0]['slug'], 'description': 'Крутое пике'}
        response = admin_client.post('/api/v1/titles/', data=data)
        assert response.status_code == 201, (
            'Проверьте, что при POST запросе `/api/v1/titles/` с правильными данными возвращает статус 201'
        )
        data = {'name': 'Проект', 'year': 2020, 'genre': [genres[2]['slug']], 'category': categories[1]['slug'],
                'description': 'Главная драма года'}
        response = admin_client.post('/api/v1/titles/', data=data)
        assert response.status_code == 201, (
            'Проверьте, что при POST запросе `/api/v1/titles/` с правильными данными возвращает статус 201'
        )
        assert type(response.json().get('id')) == int, (
            'Проверьте, что при POST запросе `/api/v1/titles/` возвращаете данные созданного объекта. '
            'Значение `id` нет или не является целым числом.'
        )
        response = admin_client.get('/api/v1/titles/')
        assert response.status_code == 200, (
            'Проверьте, что при GET запросе `/api/v1/titles/` возвращает статус 200'
        )
        data = response.json()
        assert 'count' in data, (
            'Проверьте, что при GET запросе `/api/v1/titles/` возвращаете данные с пагинацией. '
            'Не найден параметр `count`'
        )
        assert 'next' in data, (
            'Проверьте, что при GET запросе `/api/v1/titles/` возвращаете данные с пагинацией. '
            'Не найден параметр `next`'
        )
        assert 'previous' in data, (
            'Проверьте, что при GET запросе `/api/v1/titles/` возвращаете данные с пагинацией. '
            'Не найден параметр `previous`'
        )
        assert 'results' in data, (
            'Проверьте, что при GET запросе `/api/v1/titles/` возвращаете данные с пагинацией. '
            'Не найден параметр `results`'
        )
        assert data['count'] == 2, (
            'Проверьте, что при GET запросе `/api/v1/titles/` возвращаете данные с пагинацией. '
            'Значение параметра `count` не правильное'
        )
        assert type(data['results']) == list, (
            'Проверьте, что при GET запросе `/api/v1/titles/` возвращаете данные с пагинацией. '
            'Тип параметра `results` должен быть список'
        )
        assert len(data['results']) == 2, (
            'Проверьте, что при GET запросе `/api/v1/titles/` возвращаете данные с пагинацией. '
            'Значение параметра `results` не правильное'
        )
        if data['results'][0].get('name') == 'Поворот туда':
            title = data['results'][0]
        elif data['results'][1].get('name') == 'Поворот туда':
            title = data['results'][1]
        else:
            assert False, (
                'Проверьте, что при GET запросе `/api/v1/titles/` возвращаете данные с пагинацией. '
                'Значение параметра `results` неправильное, `name` не найдено или не сохранилось при POST запросе.'
            )
    
        assert title.get('rating') is None, (
            'Проверьте, что при GET запросе `/api/v1/titles/` возвращаете данные с пагинацией. '
            'Значение параметра `results` неправильное, `rating` без отзывов должен быть равен `None`'
        )
        assert title.get('category') == categories[0], (
            'Проверьте, что при GET запросе `/api/v1/titles/` возвращаете данные с пагинацией. '
            'Значение параметра `results` неправильное, значение `category` неправильное '
            'или не сохранилось при POST запросе.'
        )
        assert genres[0] in title.get('genre', []) and genres[1] in title.get('genre', []), (
            'Проверьте, что при GET запросе `/api/v1/titles/` возвращаете данные с пагинацией. '
            'Значение параметра `results` неправильное, значение `genre` неправильное '
            'или не сохранилось при POST запросе.'
        )
        assert title.get('year') == 2000, (
            'Проверьте, что при GET запросе `/api/v1/titles/` возвращаете данные с пагинацией. '
            'Значение параметра `results` неправильное, значение `year` неправильное '
            'или не сохранилось при POST запросе.'
        )
        assert title.get('description') == 'Крутое пике', (
            'Проверьте, что при GET запросе `/api/v1/titles/` возвращаете данные с пагинацией. '
            'Значение параметра `results` неправильное, значение `description` неправильное '
            'или не сохранилось при POST запросе.'
        )
        assert type(title.get('id')) == int, (
            'Проверьте, что при GET запросе `/api/v1/titles/` возвращаете данные с пагинацией. '
            'Значение параметра `results` неправильное, значение `id` нет или не является целым числом.'
        )
        data = {'name': 'Поворот', 'year': 2020, 'genre': [genres[1]['slug']],
                'category': categories[1]['slug'], 'description': 'Крутое пике'}
        admin_client.post('/api/v1/titles/', data=data)
        response = admin_client.get(f'/api/v1/titles/?genre={genres[1]["slug"]}')
        data = response.json()
>       assert len(data['results']) == 2, (
            'Проверьте, что при GET запросе `/api/v1/titles/` фильтуется по `genre` параметру `slug` жанра'
        )
E       AssertionError: Проверьте, что при GET запросе `/api/v1/titles/` фильтуется по `genre` параметру `slug` жанра
E       assert 3 == 2
E         +3
E         -2

tests/test_04_title.py:120: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:222 Bad Request: /api/v1/titles/
_____________________ Test05ReviewAPI.test_02_review_admin _____________________

self = <tests.test_05_review.Test05ReviewAPI object at 0x110b8f7c0>
admin_client = <rest_framework.test.APIClient object at 0x110b8b850>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_02_review_admin(self, admin_client, admin):
        titles, _, _ = create_titles(admin_client)
        user, moderator = create_users_api(admin_client)
        client_user = auth_client(user)
        client_moderator = auth_client(moderator)
        data = {}
        response = admin_client.post(f'/api/v1/titles/{titles[0]["id"]}/reviews/', data=data)
        assert response.status_code == 400, (
            'Проверьте, что при POST запросе `/api/v1/titles/{title_id}/reviews/` '
            'с не правильными данными возвращает статус 400'
        )
        self.create_review(admin_client, titles[0]["id"], 'qwerty', 5)
        data = {
            'text': 'Шляпа',
            'score': 1
        }
        response = admin_client.post(f'/api/v1/titles/{titles[0]["id"]}/reviews/', data=data)
        code = 400
>       assert response.status_code == code, (
            'Проверьте, что при POST запросе на `/api/v1/titles/{title_id}/reviews/` '
            'нельзя добавить второй отзыв на то же самое произведение, и возвращается '
            f'статус {code}'
        )
E       AssertionError: Проверьте, что при POST запросе на `/api/v1/titles/{title_id}/reviews/` нельзя добавить второй отзыв на то же самое произведение, и возвращается статус 400
E       assert 201 == 400
E         +201
E         -400

tests/test_05_review.py:49: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:222 Bad Request: /api/v1/titles/10/reviews/
=============================== warnings summary ===============================
tests/test_01_users.py::Test01UserAPI::test_04_users_get_admin
tests/test_01_users.py::Test01UserAPI::test_04_02_users_get_search
tests/test_01_users.py::Test01UserAPI::test_05_01_users_post_admin
  /Users/alexey/Dev/api_yamdb/venv/lib/python3.8/site-packages/rest_framework/pagination.py:200: UnorderedObjectListWarning: Pagination may yield inconsistent results with an unordered object_list: <class 'users.models.User'> QuerySet.
    paginator = self.django_paginator_class(queryset, page_size)

tests/test_02_category.py::Test02CategoryAPI::test_01_category_not_auth
tests/test_02_category.py::Test02CategoryAPI::test_02_category_admin
tests/test_02_category.py::Test02CategoryAPI::test_03_category_delete_admin
  /Users/alexey/Dev/api_yamdb/venv/lib/python3.8/site-packages/rest_framework/pagination.py:200: UnorderedObjectListWarning: Pagination may yield inconsistent results with an unordered object_list: <class 'reviews.models.Category'> QuerySet.
    paginator = self.django_paginator_class(queryset, page_size)

tests/test_03_genre.py::Test03GenreAPI::test_01_genre_not_auth
tests/test_03_genre.py::Test03GenreAPI::test_02_genre
tests/test_03_genre.py::Test03GenreAPI::test_03_genres_delete
  /Users/alexey/Dev/api_yamdb/venv/lib/python3.8/site-packages/rest_framework/pagination.py:200: UnorderedObjectListWarning: Pagination may yield inconsistent results with an unordered object_list: <class 'reviews.models.Genre'> QuerySet.
    paginator = self.django_paginator_class(queryset, page_size)

-- Docs: https://docs.pytest.org/en/stable/warnings.html
=========================== short test summary info ============================
FAILED tests/test_02_category.py::Test02CategoryAPI::test_02_category_admin
FAILED tests/test_02_category.py::Test02CategoryAPI::test_03_category_delete_admin
FAILED tests/test_03_genre.py::Test03GenreAPI::test_02_genre - AssertionError...
FAILED tests/test_03_genre.py::Test03GenreAPI::test_03_genres_delete - Assert...
FAILED tests/test_04_title.py::Test04TitleAPI::test_02_title_admin - Assertio...
FAILED tests/test_05_review.py::Test05ReviewAPI::test_02_review_admin - Asser...
=================== 6 failed, 47 passed, 9 warnings in 9.56s ===================
